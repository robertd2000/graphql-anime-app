{"version":3,"sources":["components/AnimeDetails/CharacterStaff.module.css","components/AnimeDetails/ItemCard.module.css","components/Search.module.css","components/CharacterDetail/Character.module.css","query/queries.ts","utils/Loader.tsx","utils/Paginator.tsx","components/CharacterCard.tsx","components/Search.tsx","components/SearchCharacters.tsx","components/Characters.tsx","components/Header.tsx","utils/img.tsx","assets/empty.png","components/AnimeDetails/CharacterStaff.tsx","components/AnimeDetails/CharactersStaffList.tsx","utils/AnimeRecomendCard.tsx","components/AnimeDetails/ItemCard.tsx","components/AnimeDetails/ItemDetails.tsx","components/AnimeItem.tsx","assets/notfound.png","utils/NotFound.tsx","components/List.tsx","components/CharacterDetail/CharacterDetails.tsx","components/AnimeDetails/AllAnimeCharactersList.tsx","components/AnimeDetails/AllRecomendations.tsx","components/Studios/StudioDetails.tsx","utils/Error.tsx","components/SearchAnime.tsx","App.tsx","reportWebVitals.ts","query/index.ts","index.tsx"],"names":["module","exports","GET_ANIME_LIST","gql","GET_ANIME","GET_ANIME_DETAILS","GET_CHARACTERS","GET_CHARACTER_BY_ID","GET_ALL_ANIME_CHARACTERS","GET_ALL_RECOMENDATIONS","GET_STUDIO","Loader","className","Paginator","startPage","endPage","totalPages","currentPage","changePage","pageItem","Array","keys","map","i","page","onClick","CharacterCard","data","age","gender","id","large","image","name","full","native","siteUrl","dateOfBirth","day","month","src","alt","to","href","Search","inputHandler","s","group","onChange","type","text","required","highlight","bar","SearchCharacters","handleInput","useState","value","setValue","container","e","preventDefault","target","Characters","list","setList","setPage","useQuery","variables","loading","Math","ceil","Page","pageInfo","total","useEffect","characters","item","Header","Img","preloader","img","isLoaded","setIsLoaded","bg","Image","onload","CharacterStaff","fullname","role","voiceActor","medium","card","photo","description","descriptionRight","photoRight","CharactersStaffList","edges","wrapper","char","node","voiceActors","AnimeRecomendCard","limg","english","ntitle","titleCard","random","ItemCard","title","duration","season","seasonYear","startDate","year","endDate","endYear","endMonth","endDay","episodes","bannerImage","studios","nodes","countryOfOrigin","coverImage","extraLarge","color","averageScore","genres","recommendations","style","backgroundImage","backgroundColor","movieInfo","fontSize","genresWrapper","genre","rating","synopsis","dangerouslySetInnerHTML","__html","movieTechData","studio","charWrapper","mediaRecommendation","userPreferred","ItemDetailsContainer","withRouter","props","match","params","Media","AnimeItem","fixedGenres","length","slice","NotFound","notFound","List","CharacterDetailWrapper","Character","media","s1","margin","maxWidth","display","justifyContent","AllCharactersListWrapper","AllRecomendationsWrapper","StudioDetails","setName","Error","error","message","SearchAnime","search","App","exact","path","render","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StrictMode","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2f626827.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"CharacterStaff_wrapper__3stsb\",\"card\":\"CharacterStaff_card__2SCc-\",\"photo\":\"CharacterStaff_photo__21LdM\",\"photoRight\":\"CharacterStaff_photoRight__3f-Jd\",\"description\":\"CharacterStaff_description__3MLfL\",\"descriptionRight\":\"CharacterStaff_descriptionRight__1LlFX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"charWrapper\":\"ItemCard_charWrapper__2mUFn\",\"bg\":\"ItemCard_bg__1Coo7\",\"wrapper\":\"ItemCard_wrapper__26Eib\",\"container\":\"ItemCard_container__2sXSf\",\"img\":\"ItemCard_img__uNth-\",\"movieInfo\":\"ItemCard_movieInfo__1iZn9\",\"title\":\"ItemCard_title__vDvFg\",\"rating\":\"ItemCard_rating__7UyjZ\",\"movieSuggestions\":\"ItemCard_movieSuggestions__IELHZ\",\"movieSuggestionsCard\":\"ItemCard_movieSuggestionsCard__3LeH1\",\"synopsis\":\"ItemCard_synopsis__O4DPg\",\"movieTechData\":\"ItemCard_movieTechData__hPOHa\",\"genresWrapper\":\"ItemCard_genresWrapper__1B4iP\",\"studios\":\"ItemCard_studios__3kZiI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Search_container__38w3k\",\"group\":\"Search_group__22keK\",\"bar\":\"Search_bar__2Wq7H\",\"highlight\":\"Search_highlight__7lpJY\",\"inputHighlighter\":\"Search_inputHighlighter__3SrZ6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"charWrapper\":\"Character_charWrapper__3qsVJ\",\"bg\":\"Character_bg__3IZtJ\",\"wrapper\":\"Character_wrapper__HYeDn\",\"titleCard\":\"Character_titleCard__2XjqI\",\"synopsis\":\"Character_synopsis__1KbB7\"};","import { gql } from '@apollo/client'\r\n\r\nexport const GET_ANIME_LIST = gql`\r\n  query Page($page: Int) {\r\n    Page(page: $page, perPage: 20) {\r\n      pageInfo {\r\n        total\r\n      }\r\n      media {\r\n        id\r\n        title {\r\n          english\r\n          native\r\n        }\r\n        status\r\n        type\r\n        season\r\n        genres\r\n        episodes\r\n        seasonYear\r\n        coverImage {\r\n          large\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_ANIME = gql`\r\n  query Page($page: Int, $search: String) {\r\n    Page(page: $page, perPage: 20) {\r\n      pageInfo {\r\n        total\r\n      }\r\n      media(search: $search) {\r\n        id\r\n        title {\r\n          english\r\n          native\r\n        }\r\n        status\r\n        type\r\n        season\r\n        genres\r\n        episodes\r\n        seasonYear\r\n        coverImage {\r\n          large\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_ANIME_DETAILS = gql`\r\n  query Media($id: Int) {\r\n    Media(id: $id) {\r\n      title {\r\n        english\r\n        native\r\n      }\r\n      description\r\n      startDate {\r\n        year\r\n        month\r\n        day\r\n      }\r\n      endDate {\r\n        year\r\n        month\r\n        day\r\n      }\r\n      season\r\n      seasonYear\r\n      episodes\r\n      duration\r\n      countryOfOrigin\r\n      coverImage {\r\n        extraLarge\r\n        color\r\n      }\r\n      bannerImage\r\n      genres\r\n      averageScore\r\n      studios {\r\n        nodes {\r\n          name\r\n          id\r\n        }\r\n      }\r\n      siteUrl\r\n      recommendations(perPage: 6, sort: [RATING_DESC, ID]) {\r\n        pageInfo {\r\n          total\r\n        }\r\n        nodes {\r\n          id\r\n          rating\r\n          mediaRecommendation {\r\n            id\r\n            title {\r\n              userPreferred\r\n              native\r\n            }\r\n            status(version: 2)\r\n            coverImage {\r\n              large\r\n            }\r\n          }\r\n        }\r\n      }\r\n      characters(sort: [ROLE, RELEVANCE, ID], perPage: 10) {\r\n        edges {\r\n          role\r\n          id\r\n          voiceActors(language: JAPANESE) {\r\n            id\r\n            name {\r\n              full\r\n            }\r\n            image {\r\n              medium\r\n            }\r\n          }\r\n          node {\r\n            id\r\n            name {\r\n              full\r\n              native\r\n            }\r\n            image {\r\n              medium\r\n            }\r\n            age\r\n            gender\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_CHARACTERS = gql`\r\n  query characters($name: String, $page: Int) {\r\n    Page(page: $page, perPage: 20) {\r\n      pageInfo {\r\n        total\r\n      }\r\n      characters(search: $name) {\r\n        name {\r\n          full\r\n          native\r\n        }\r\n        image {\r\n          large\r\n        }\r\n        gender\r\n        dateOfBirth {\r\n          year\r\n          month\r\n          day\r\n        }\r\n        age\r\n        id\r\n        siteUrl\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_CHARACTER_BY_ID = gql`\r\n  query character($id: Int) {\r\n    Character(id: $id) {\r\n      name {\r\n        full\r\n        native\r\n      }\r\n      image {\r\n        large\r\n      }\r\n      id\r\n      gender\r\n      dateOfBirth {\r\n        month\r\n        day\r\n      }\r\n      description(asHtml: true)\r\n      age\r\n      siteUrl\r\n      media {\r\n        edges {\r\n          node {\r\n            id\r\n            title {\r\n              english\r\n              native\r\n            }\r\n            coverImage {\r\n              large\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_ALL_ANIME_CHARACTERS = gql`\r\n  query media($id: Int, $page: Int) {\r\n    Media(id: $id) {\r\n      id\r\n      characters(page: $page, sort: [ROLE, RELEVANCE, ID]) {\r\n        pageInfo {\r\n          total\r\n          perPage\r\n          currentPage\r\n          lastPage\r\n          hasNextPage\r\n        }\r\n        edges {\r\n          role\r\n          id\r\n          voiceActors(language: JAPANESE) {\r\n            id\r\n            name {\r\n              full\r\n            }\r\n            image {\r\n              medium\r\n            }\r\n          }\r\n          node {\r\n            id\r\n            name {\r\n              full\r\n              native\r\n            }\r\n            image {\r\n              medium\r\n            }\r\n            age\r\n            gender\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_ALL_RECOMENDATIONS = gql`\r\n  query media($id: Int, $page: Int) {\r\n    Media(id: $id) {\r\n      recommendations(page: $page, perPage: 25, sort: [RATING_DESC, ID]) {\r\n        pageInfo {\r\n          total\r\n        }\r\n        nodes {\r\n          id\r\n          rating\r\n\r\n          mediaRecommendation {\r\n            genres\r\n            episodes\r\n            seasonYear\r\n            id\r\n            title {\r\n              english\r\n              native\r\n            }\r\n            status(version: 2)\r\n            coverImage {\r\n              large\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const GET_STUDIO = gql`\r\n  query Media($id: Int, $page: Int) {\r\n    Page(page: 1) {\r\n      studios(id: $id, sort: SEARCH_MATCH) {\r\n        name\r\n        id\r\n        media(page: $page) {\r\n          pageInfo {\r\n            total\r\n          }\r\n          nodes {\r\n            id\r\n            title {\r\n              romaji\r\n              english\r\n              native\r\n              userPreferred\r\n            }\r\n            coverImage {\r\n              extraLarge\r\n              large\r\n              medium\r\n              color\r\n            }\r\n            seasonYear\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import './Loader.css'\r\n\r\nlet Loader = () => {\r\n  return (\r\n    <div className=\"lds-roller\">\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n      <div></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","type PaginatorType = {\r\n  totalPages: number\r\n  currentPage: number\r\n  changePage: (page: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorType> = ({\r\n  totalPages,\r\n  currentPage,\r\n  changePage,\r\n}) => {\r\n  let startPage: number, endPage: number\r\n  if (totalPages <= 10) {\r\n    // less than 10 total pages so show all\r\n    startPage = 1\r\n    endPage = totalPages\r\n  } else {\r\n    // more than 10 total pages so calculate start and end pages\r\n    if (currentPage <= 6) {\r\n      startPage = 1\r\n      endPage = 10\r\n    } else if (currentPage + 4 >= totalPages) {\r\n      startPage = totalPages - 9\r\n      endPage = totalPages\r\n    } else {\r\n      startPage = currentPage - 5\r\n      endPage = currentPage + 4\r\n    }\r\n  }\r\n\r\n  const toStartPage = () => {\r\n    changePage(1)\r\n  }\r\n\r\n  const toEndPage = () => {\r\n    changePage(totalPages)\r\n  }\r\n  const prevPage = () => {\r\n    if (currentPage === 1 || currentPage < 1) return false\r\n    changePage(currentPage - 1)\r\n  }\r\n  const nextPage = () => {\r\n    if (currentPage > totalPages || currentPage === totalPages) return false\r\n    changePage(currentPage + 1)\r\n  }\r\n  // create an array of pages to ng-repeat in the pager control\r\n  const pages: number[] = [...Array(endPage + 1 - startPage).keys()].map(\r\n    (i) => startPage + i\r\n  )\r\n\r\n  const pageItem = pages.map((page: number) => {\r\n    return (\r\n      <li key={page}>\r\n        <span\r\n          onClick={() => changePage(page)}\r\n          className={currentPage === page ? 'active' : ''}\r\n        >\r\n          {page}\r\n        </span>\r\n      </li>\r\n    )\r\n  })\r\n  return (\r\n    <ul className=\"pagination\">\r\n      <li>\r\n        <span onClick={toStartPage}>To start</span>\r\n      </li>\r\n      <li>\r\n        <span onClick={prevPage}>Prev</span>\r\n      </li>\r\n      {pageItem}\r\n      <li>\r\n        <span onClick={nextPage}>Next</span>\r\n      </li>\r\n      <li>\r\n        <span onClick={toEndPage}>To end</span>\r\n      </li>\r\n    </ul>\r\n  )\r\n}\r\n","import { Link } from 'react-router-dom'\r\n\r\ntype CharacterCardType = {\r\n  data: {\r\n    age: string\r\n    gender: string\r\n    id: number\r\n    image: {\r\n      large: string\r\n    }\r\n    name: {\r\n      full: string\r\n      native: string\r\n    }\r\n    siteUrl: string\r\n    dateOfBirth: {\r\n      day: number\r\n      month: number\r\n    }\r\n  }\r\n}\r\n\r\nexport const CharacterCard: React.FC<CharacterCardType> = ({ data }) => {\r\n  const {\r\n    age,\r\n    gender,\r\n    id,\r\n    image: { large },\r\n    name: { full, native },\r\n    siteUrl,\r\n    dateOfBirth: { day, month },\r\n  } = data\r\n  return (\r\n    <div className=\"cardChar\">\r\n      <div className=\"card-image\">\r\n        <img src={large} alt={large} />\r\n        <h2 className=\"character-title\">{full}</h2>\r\n        <h3>{native}</h3>\r\n      </div>\r\n      <div className=\"card-content\">\r\n        <div>Gender:{gender}</div>\r\n        <div>Age: {age}</div>\r\n        <p>\r\n          Birthday: {day}.{month}\r\n        </p>\r\n      </div>\r\n      <div className=\"card-action\">\r\n        <Link to={`/character/${id}`}>More info</Link>\r\n        <a href={siteUrl}>Watch on website</a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import s from './Search.module.css'\r\ntype SearchType = {\r\n  inputHandler: (e: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\nexport const Search: React.FC<SearchType> = ({ inputHandler }) => {\r\n  return (\r\n    <div className={s.group}>\r\n      <input onChange={inputHandler} type={s.text} required />\r\n      <span className={s.highlight}></span>\r\n      <span className={s.bar}></span>\r\n      <label>Character name</label>\r\n    </div>\r\n  )\r\n}\r\n","import { useQuery } from '@apollo/client'\r\nimport { useEffect, useState } from 'react'\r\nimport { GET_ANIME, GET_CHARACTERS } from '../query/queries'\r\nimport { Data } from '../types'\r\nimport Loader from '../utils/Loader'\r\nimport { AnimeItem } from './AnimeItem'\r\nimport { List } from './List'\r\nimport { Search } from './Search'\r\nimport s from './Search.module.css'\r\n\r\ntype SearchCharactersType = {\r\n  handleInput: (e: any) => void\r\n}\r\n\r\nexport const SearchCharacters: React.FC<SearchCharactersType> = ({\r\n  handleInput,\r\n}) => {\r\n  const [value, setValue] = useState('')\r\n\r\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault()\r\n    setValue(e.target.value)\r\n    handleInput(value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.container}>\r\n        <h2>Search characters: </h2>\r\n        <Search inputHandler={inputHandler} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useQuery } from '@apollo/client'\r\nimport { useEffect, useState } from 'react'\r\nimport { GET_CHARACTERS } from '../query/queries'\r\nimport Loader from '../utils/Loader'\r\nimport { Paginator } from '../utils/Paginator'\r\nimport { CharacterCard } from './CharacterCard'\r\nimport './CharacterCard.css'\r\nimport { SearchCharacters } from './SearchCharacters'\r\n\r\nexport const Characters = () => {\r\n  const [list, setList] = useState([])\r\n  const [page, setPage] = useState(1)\r\n  const [value, setValue] = useState('')\r\n  const { data, loading } = useQuery(GET_CHARACTERS, {\r\n    variables: {\r\n      name: value,\r\n      page,\r\n    },\r\n  })\r\n\r\n  let totalPages =\r\n    data && !loading ? Math.ceil(data.Page.pageInfo.total / 20) : 1\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      setList(data.Page.characters)\r\n    }\r\n  }, [data])\r\n\r\n  const changePage = (page: number) => {\r\n    setPage(page)\r\n  }\r\n\r\n  const handleInput = (e: any) => {\r\n    setValue(e)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <SearchCharacters handleInput={handleInput} />\r\n\r\n      <div className=\"characters-inner\">\r\n        {!loading && list ? (\r\n          list.map((item) => {\r\n            return <CharacterCard data={item} />\r\n          })\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </div>\r\n\r\n      {totalPages ? (\r\n        <Paginator\r\n          currentPage={page}\r\n          totalPages={totalPages}\r\n          changePage={changePage}\r\n        />\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n","import { Link } from 'react-router-dom'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div className=\"header\">\r\n      <Link to=\"/\" href=\"#default\" className=\"logo\">\r\n        Anime App\r\n      </Link>\r\n      <div className=\"header-right\">\r\n        <Link to=\"/\" href=\"#home\">\r\n          Home\r\n        </Link>\r\n        <Link to=\"/search-anime\" href=\"#contact\">\r\n          Search Anime\r\n        </Link>\r\n        <Link to=\"/search-character\" href=\"#contact\">\r\n          Search Character\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport { Header }\r\n","import React, { useState } from 'react'\r\n\r\ninterface IProps {\r\n  preloader: string\r\n  img: string\r\n}\r\n\r\nconst Img: React.FC<IProps> = ({ preloader, img }) => {\r\n  const [isLoaded, setIsLoaded] = useState(false)\r\n\r\n  let bg = new Image()\r\n  bg.src = img\r\n  bg.onload = () => {\r\n    setIsLoaded(true)\r\n  }\r\n\r\n  return isLoaded ? (\r\n    <img src={img} alt={img}></img>\r\n  ) : (\r\n    <img src={preloader} alt={img}></img>\r\n  )\r\n}\r\n\r\nexport default Img\r\n","export default __webpack_public_path__ + \"static/media/empty.817176e3.png\";","import Img from '../../utils/img'\r\nimport s from './CharacterStaff.module.css'\r\nimport preloader from '../../assets/empty.png'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype CharacterStaffType = {\r\n  fullname: string\r\n  native: string\r\n  image: string\r\n  age: number\r\n  role: string\r\n  id: number\r\n  voiceActor: {\r\n    name: {\r\n      full: string\r\n    }\r\n    image: {\r\n      medium: string\r\n    }\r\n  }\r\n}\r\n\r\nexport const CharacterStaff: React.FC<CharacterStaffType> = ({\r\n  id,\r\n  fullname,\r\n  image,\r\n  role,\r\n  voiceActor: { name: { full = '' } = {}, image: { medium = '' } = {} } = {},\r\n}) => {\r\n  return (\r\n    <div className={s.card}>\r\n      <div className={s.photo}>\r\n        <Img preloader={preloader} img={image} />\r\n      </div>\r\n      <div className={s.description}>\r\n        <Link to={`/character/${id}`}>\r\n          <h3>{fullname}</h3>\r\n        </Link>\r\n\r\n        <h4>{role}</h4>\r\n      </div>\r\n      <div className={s.descriptionRight}>\r\n        <h3>{full}</h3>\r\n      </div>\r\n      <div className={s.photoRight}>\r\n        <Img preloader={preloader} img={medium} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { CharacterNodeType, edge } from '../../types'\r\nimport Loader from '../../utils/Loader'\r\nimport { CharacterStaff } from './CharacterStaff'\r\nimport s from './CharacterStaff.module.css'\r\n\r\ntype CharactersStaffListType = {\r\n  characters: CharactersStaffListDataType\r\n}\r\n\r\ntype CharactersStaffListDataType = {\r\n  edges: [edge]\r\n}\r\n\r\nexport const CharactersStaffList: React.FC<CharactersStaffListType> = ({\r\n  characters,\r\n}) => {\r\n  const { edges } = characters\r\n\r\n  if (!edges) {\r\n    return <Loader />\r\n  }\r\n  return (\r\n    <div className={s.wrapper}>\r\n      {edges\r\n        ? edges.map((char: edge) => {\r\n            const {\r\n              node: {\r\n                name: { full, native },\r\n                image: { medium },\r\n                age,\r\n                id,\r\n              },\r\n              role,\r\n              voiceActors,\r\n            } = char\r\n            return (\r\n              <CharacterStaff\r\n                key={id}\r\n                fullname={full}\r\n                native={native}\r\n                age={age}\r\n                image={medium}\r\n                role={role}\r\n                id={id}\r\n                voiceActor={voiceActors[0]}\r\n              />\r\n            )\r\n          })\r\n        : ''}\r\n    </div>\r\n  )\r\n}\r\n","import { Link } from 'react-router-dom'\r\nimport s from '../components/CharacterDetail/Character.module.css'\r\n\r\ntype AnimeRecomendCardType = {\r\n  id: number\r\n  limg: string\r\n  english: string\r\n  ntitle: string\r\n}\r\n\r\nexport const AnimeRecomendCard: React.FC<AnimeRecomendCardType> = ({\r\n  id,\r\n  limg,\r\n  english,\r\n  ntitle,\r\n}) => {\r\n  return (\r\n    <div key={id + Math.random()} className={s.titleCard}>\r\n      <Link to={`/anime/${id}`}>\r\n        <div>\r\n          <img src={limg} alt={limg} />\r\n          <span>\r\n            <h3>{english ? english : ntitle}</h3>\r\n          </span>\r\n        </div>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n","import Img from '../../utils/img'\r\nimport s from './ItemCard.module.css'\r\nimport preloader from '../../assets/empty.png'\r\nimport { CharactersStaffList } from './CharactersStaffList'\r\nimport { CharacterNodeType, edge } from '../../types'\r\nimport { Link } from 'react-router-dom'\r\nimport { AnimeRecomendCard } from '../../utils/AnimeRecomendCard'\r\n\r\ntype ItemCardType = {\r\n  data: ItemCardDataType\r\n  id: number\r\n}\r\n\r\ntype ItemCardDataType = {\r\n  title: {\r\n    english: string\r\n    native: string\r\n  }\r\n  description: string\r\n  startDate: {\r\n    year: number\r\n    month: number\r\n    day: number\r\n  }\r\n  endDate: {\r\n    year: number\r\n    month: number\r\n    day: number\r\n  }\r\n  season: string\r\n  seasonYear: number\r\n  episodes: number\r\n  duration: number\r\n  countryOfOrigin: string\r\n  coverImage: {\r\n    extraLarge: string\r\n    color: string\r\n  }\r\n  bannerImage: string\r\n  genres?: [string]\r\n  averageScore: number\r\n  studios: {\r\n    nodes: [{ name: string; id: number }]\r\n  }\r\n  siteUrl: string\r\n  characters: {\r\n    edges: [edge]\r\n    // nodes: [CharacterNodeType];\r\n  }\r\n  recommendations: {\r\n    nodes: [nodesType]\r\n  }\r\n}\r\n\r\ntype nodesType = {\r\n  mediaRecommendation: {\r\n    coverImage: {\r\n      large: string\r\n    }\r\n    id: number\r\n    status: string\r\n    title: {\r\n      userPreferred: string\r\n      native: string\r\n    }\r\n  }\r\n}\r\n\r\nexport const ItemCard: React.FC<ItemCardType> = ({ data, id }) => {\r\n  const {\r\n    title: { native, english },\r\n    description,\r\n    duration,\r\n    season,\r\n    seasonYear,\r\n    startDate: { year, month, day },\r\n    endDate: { year: endYear, month: endMonth, day: endDay },\r\n    episodes,\r\n    bannerImage,\r\n    studios: { nodes: studios },\r\n    siteUrl,\r\n    countryOfOrigin,\r\n    coverImage: { extraLarge, color },\r\n    averageScore,\r\n    genres,\r\n    characters,\r\n    recommendations: { nodes },\r\n  } = data\r\n\r\n  return (\r\n    <div className={s.bg}>\r\n      <div\r\n        className={s.wrapper}\r\n        style={{\r\n          backgroundImage: `url(${bannerImage})`,\r\n          backgroundColor: color,\r\n        }}\r\n      >\r\n        <div className={s.container}>\r\n          <div className={s.img}>\r\n            <Img img={extraLarge} preloader={preloader} />\r\n          </div>\r\n          <div className={s.movieInfo}>\r\n            <div className={s.title}>\r\n              <h2 style={{ color: 'white', fontSize: '40px' }}> {english}</h2>\r\n            </div>\r\n            <div className={s.title}>\r\n              <h3>{native}</h3>\r\n            </div>\r\n\r\n            <div>{year}</div>\r\n            <div className={s.genresWrapper}>\r\n              {genres\r\n                ? genres.map((genre: string) => (\r\n                    <span key={genre + Math.random()}>{genre}/</span>\r\n                  ))\r\n                : ''}\r\n            </div>\r\n            <div className={s.rating}>\r\n              <img\r\n                src=\"https://yts.mx/assets/images/website/logo-imdb.svg\"\r\n                alt=\"imdb\"\r\n              />\r\n              <span>&#9733; {averageScore}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className={s.synopsis}>\r\n        <h3>Synopsis</h3>\r\n        <div dangerouslySetInnerHTML={{ __html: description }}></div>\r\n\r\n        <div className={s.movieTechData}>\r\n          <div>Episodes: {episodes}</div>\r\n          <div>Duration: {duration}</div>\r\n          <div>Season: {season}</div>\r\n          <div>Season year: {seasonYear}</div>\r\n          <div>Country of origin: {countryOfOrigin}</div>\r\n          <div>\r\n            Start date: {day}.{month}.{year}{' '}\r\n          </div>\r\n          <div>\r\n            End date: {endDay}.{endMonth}.{endYear}{' '}\r\n          </div>\r\n        </div>\r\n        <div className={s.studios}>\r\n          <h3>Studios:</h3>\r\n          {studios\r\n            ? studios.map((studio) => {\r\n                return (\r\n                  <div>\r\n                    <Link to={`/studio/${studio.id}`}>{studio.name}</Link>\r\n                  </div>\r\n                )\r\n              })\r\n            : null}\r\n        </div>\r\n        <div>\r\n          <Link to={`/anime/characters/${id}`}>\r\n            <h2 className=\"h2-black\">Characters </h2>\r\n          </Link>\r\n\r\n          <CharactersStaffList characters={characters} />\r\n        </div>\r\n        <div>\r\n          <Link to={`/anime/recomendations/${id}`}>\r\n            <h2 className=\"h2-black\">Recommendations</h2>\r\n          </Link>\r\n\r\n          <div className={s.charWrapper}>\r\n            {nodes\r\n              ? nodes.map((item) => {\r\n                  const {\r\n                    mediaRecommendation: {\r\n                      id,\r\n                      coverImage: { large: limg },\r\n                      title: { userPreferred, native: ntitle },\r\n                    },\r\n                  } = item\r\n                  return (\r\n                    <AnimeRecomendCard\r\n                      key={id + Math.random()}\r\n                      id={id}\r\n                      english={userPreferred}\r\n                      ntitle={ntitle}\r\n                      limg={limg}\r\n                    />\r\n                  )\r\n                })\r\n              : null}\r\n          </div>\r\n        </div>\r\n\r\n        <a href={siteUrl}>Chech on site</a>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useQuery } from '@apollo/client'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { GET_ANIME_DETAILS } from '../../query/queries'\r\nimport Loader from '../../utils/Loader'\r\nimport { ItemCard } from './ItemCard'\r\n\r\nconst ItemDetails = (props: any) => {\r\n  let id = props.match.params.id\r\n\r\n  const { data, loading } = useQuery(GET_ANIME_DETAILS, {\r\n    variables: {\r\n      id,\r\n    },\r\n  })\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n\r\n  return (\r\n    <div>{!loading && data ? <ItemCard data={data.Media} id={id} /> : ''}</div>\r\n  )\r\n}\r\n\r\nexport const ItemDetailsContainer = withRouter(ItemDetails)\r\n","import Img from '../utils/img'\r\nimport preloader from '../assets/empty.png'\r\nimport { Data } from '../types'\r\nimport { Link } from 'react-router-dom'\r\n\r\ntype AnimeItemType = {\r\n  data: Data\r\n}\r\n\r\nexport const AnimeItem: React.FC<AnimeItemType> = ({ data }) => {\r\n  data = data.mediaRecommendation ? data.mediaRecommendation : data\r\n  const { title, id, coverImage, episodes, seasonYear, genres } = data\r\n\r\n  const fixedGenres = genres.length > 3 ? genres.slice(0, 3) : genres\r\n  return (\r\n    <div className=\"card\">\r\n      <Link to={`/anime/${id}`}>\r\n        <div className=\"img-inner\">\r\n          <Img preloader={preloader} img={coverImage.large} />\r\n          <div className=\"card-desc\">\r\n            <h2 style={{ color: 'white' }}>{title.english}</h2>\r\n            <h2 style={{ color: 'white' }}>{title.native}</h2>\r\n            Season year - {seasonYear}\r\n            <br />\r\n            <ul>\r\n              <h3>Genres:</h3>\r\n              {fixedGenres\r\n                ? fixedGenres.map((genre: string) => (\r\n                    <li key={genre + Math.random()}>{genre}</li>\r\n                  ))\r\n                : ''}\r\n            </ul>\r\n            <br />\r\n            <div>Episodes - {episodes}</div>\r\n            <div className=\"card-link\"></div>\r\n          </div>\r\n        </div>\r\n\r\n        <h2 className=\"card-title\">\r\n          {title.english === null || title.english === ''\r\n            ? title.native\r\n            : title.english}\r\n        </h2>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/notfound.6eab02e4.png\";","import notFound from '../assets/notfound.png'\r\nexport const NotFound = () => {\r\n  return (\r\n    <div className=\"notFound\">\r\n      <img src={notFound} alt=\"notFound\" />\r\n    </div>\r\n  )\r\n}\r\n","import { Data } from '../types'\r\nimport Loader from '../utils/Loader'\r\nimport { AnimeItem } from './AnimeItem'\r\nimport { Paginator } from '../utils/Paginator'\r\nimport { NotFound } from '../utils/NotFound'\r\n\r\ntype ListType = {\r\n  page: number\r\n  loading: boolean\r\n  list: any\r\n  totalPages: number\r\n  changePage: (page: number) => void\r\n}\r\n\r\nexport const List: React.FC<ListType> = ({\r\n  page,\r\n  loading,\r\n  list,\r\n  totalPages,\r\n  changePage,\r\n}) => {\r\n  return (\r\n    <div className={'cards-inner'}>\r\n      {loading ? <Loader /> : null}\r\n      <div className={'cards'}>\r\n        {list\r\n          ? list.map((page: Data) => {\r\n              return <AnimeItem key={page.id + Math.random()} data={page} />\r\n            })\r\n          : ''}\r\n      </div>\r\n      {totalPages ? (\r\n        <Paginator\r\n          totalPages={totalPages}\r\n          currentPage={page}\r\n          changePage={changePage}\r\n        />\r\n      ) : (\r\n        <NotFound />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { useQuery } from '@apollo/client'\r\nimport { Link, withRouter } from 'react-router-dom'\r\nimport { GET_CHARACTER_BY_ID } from '../../query/queries'\r\nimport Loader from '../../utils/Loader'\r\nimport { AnimeRecomendCard } from '../../utils/AnimeRecomendCard'\r\nimport s from '../AnimeDetails/CharacterStaff.module.css'\r\nimport s1 from './Character.module.css'\r\n\r\nimport preloader from '../../assets/empty.png'\r\nimport Img from '../../utils/img'\r\n\r\nconst CharacterDetail = (props: any) => {\r\n  let id = props.match.params.id\r\n  const { data, loading } = useQuery(GET_CHARACTER_BY_ID, {\r\n    variables: {\r\n      id,\r\n    },\r\n  })\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n\r\n  const {\r\n    age,\r\n    dateOfBirth: { day, month },\r\n    description,\r\n    gender,\r\n    image: { large },\r\n    media,\r\n    name: { full, native },\r\n    siteUrl,\r\n  } = data.Character\r\n  return (\r\n    <div style={{ backgroundColor: 'white' }}>\r\n      <div\r\n        className={s.bg + ' ' + s1.bg}\r\n        style={{\r\n          margin: '0 auto',\r\n          maxWidth: '1100px',\r\n          display: 'flex',\r\n          justifyContent: 'space-between',\r\n        }}\r\n      >\r\n        <div className={s.wrapper + ' ' + s1.wrapper}>\r\n          <div className={s.container}>\r\n            <div className={s.img}>\r\n              <Img img={large} preloader={preloader} />\r\n            </div>\r\n            <div className={s.movieInfo}>\r\n              <div className={s.title}>\r\n                <h2 className=\"h2-black\">{full}</h2>\r\n              </div>\r\n              <div className={s.title}>\r\n                <h3>{native}</h3>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className={s.synopsis + ' ' + s1.synopsis}>\r\n          <h3>Synopsis</h3>\r\n          <div dangerouslySetInnerHTML={{ __html: description }}></div>\r\n          <div className={s.movieTechData}>\r\n            <div>{gender}</div>\r\n            <div>Age: {age ? age : 'no info'}</div>\r\n            <div>\r\n              Birthday: {day && month ? { day } + '.' + { month } : 'no info'}\r\n            </div>\r\n          </div>\r\n          <a href={siteUrl}>Chech on site</a>\r\n        </div>\r\n      </div>\r\n      <h2 className=\"h2-black\">Media: </h2>\r\n\r\n      <div className={s1.charWrapper}>\r\n        {media\r\n          ? media.edges.map((item: any) => {\r\n              const {\r\n                node: {\r\n                  id,\r\n                  coverImage: { large: limg },\r\n                  title: { english, native: ntitle },\r\n                },\r\n              } = item\r\n              return (\r\n                <AnimeRecomendCard\r\n                  key={id + Math.random()}\r\n                  id={id}\r\n                  english={english}\r\n                  ntitle={ntitle}\r\n                  limg={limg}\r\n                />\r\n              )\r\n            })\r\n          : ''}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const CharacterDetailWrapper = withRouter(CharacterDetail)\r\n","import { useQuery } from '@apollo/client'\r\nimport { useEffect, useState } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { GET_ALL_ANIME_CHARACTERS } from '../../query/queries'\r\nimport Loader from '../../utils/Loader'\r\nimport { NotFound } from '../../utils/NotFound'\r\nimport { Paginator } from '../../utils/Paginator'\r\nimport { CharacterStaff } from './CharacterStaff'\r\nimport s from './CharacterStaff.module.css'\r\n\r\nconst AllCharactersList = (props: any) => {\r\n  let id = props.match.params.id\r\n  const [page, setPage] = useState(1)\r\n  const { data, loading } = useQuery(GET_ALL_ANIME_CHARACTERS, {\r\n    variables: {\r\n      id,\r\n      page,\r\n    },\r\n  })\r\n  const [list, setList] = useState([])\r\n  const total =\r\n    data && !loading ? Math.ceil(data.Media.characters.pageInfo.total / 25) : 1\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      setList(data.Media.characters.edges)\r\n    }\r\n  }, [data])\r\n\r\n  const changePage = (page: number) => {\r\n    setPage(page)\r\n  }\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n  return (\r\n    <>\r\n      <div className={s.wrapper}>\r\n        {!loading ? (\r\n          list.map((item) => {\r\n            const {\r\n              role,\r\n              voiceActors,\r\n              node: {\r\n                id,\r\n                age,\r\n                gender,\r\n                image: { medium },\r\n                name: { full, native },\r\n              },\r\n            } = item\r\n\r\n            return (\r\n              <CharacterStaff\r\n                key={id + Math.random()}\r\n                id={id}\r\n                age={age}\r\n                fullname={full}\r\n                voiceActor={voiceActors[0]}\r\n                image={medium}\r\n                role={role}\r\n                native={native}\r\n              />\r\n            )\r\n          })\r\n        ) : (\r\n          <NotFound />\r\n        )}\r\n      </div>\r\n      <Paginator\r\n        totalPages={total}\r\n        currentPage={page}\r\n        changePage={changePage}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport const AllCharactersListWrapper = withRouter(AllCharactersList)\r\n","import { useQuery } from '@apollo/client'\r\nimport { useEffect, useState } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { GET_ALL_RECOMENDATIONS } from '../../query/queries'\r\nimport { AnimeRecomendCard } from '../../utils/AnimeRecomendCard'\r\nimport Loader from '../../utils/Loader'\r\nimport { NotFound } from '../../utils/NotFound'\r\nimport { Paginator } from '../../utils/Paginator'\r\nimport { List } from '../List'\r\nimport s from './ItemCard.module.css'\r\n\r\nconst AllRecomendations = (props: any) => {\r\n  const [list, setList] = useState([])\r\n  const [page, setPage] = useState(1)\r\n  let id = props.match.params.id\r\n\r\n  const { data, loading } = useQuery(GET_ALL_RECOMENDATIONS, {\r\n    variables: {\r\n      id,\r\n      page,\r\n    },\r\n  })\r\n  const total =\r\n    data && !loading\r\n      ? Math.ceil(data.Media.recommendations.pageInfo.total / 25)\r\n      : 1\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      setList(data.Media.recommendations.nodes)\r\n    }\r\n  }, [data])\r\n\r\n  const changePage = (page: number) => {\r\n    setPage(page)\r\n  }\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n  return (\r\n    <div>\r\n      <div className={s.charWrapper}>\r\n        <List\r\n          changePage={changePage}\r\n          totalPages={total}\r\n          page={page}\r\n          list={list}\r\n          loading={loading}\r\n        />\r\n        {/* {!loading ? (\r\n          list.map((item) => {\r\n            const {\r\n              mediaRecommendation: {\r\n                id,\r\n                coverImage: { large: limg },\r\n                title: { english, native: ntitle },\r\n              },\r\n            } = item\r\n            return (\r\n              <AnimeRecomendCard\r\n                key={id + Math.random()}\r\n                id={id}\r\n                english={english}\r\n                ntitle={ntitle}\r\n                limg={limg}\r\n              />\r\n            )\r\n          })\r\n        ) : (\r\n          <NotFound />\r\n        )} */}\r\n      </div>\r\n      <Paginator\r\n        totalPages={total}\r\n        currentPage={page}\r\n        changePage={changePage}\r\n      />\r\n    </div>\r\n  )\r\n}\r\nexport const AllRecomendationsWrapper = withRouter(AllRecomendations)\r\n","import { useQuery } from '@apollo/client'\r\nimport { useEffect, useState } from 'react'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { GET_STUDIO } from '../../query/queries'\r\nimport { AnimeRecomendCard } from '../../utils/AnimeRecomendCard'\r\nimport Loader from '../../utils/Loader'\r\nimport { Paginator } from '../../utils/Paginator'\r\n\r\nconst StudioDetailsWrapperr = (props: any) => {\r\n  let id = props.match.params.id\r\n  const [list, setList] = useState([])\r\n  const [name, setName] = useState('')\r\n  const [page, setPage] = useState(1)\r\n\r\n  const { data, loading } = useQuery(GET_STUDIO, {\r\n    variables: {\r\n      id,\r\n      page,\r\n    },\r\n  })\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      setList(data.Page.studios[0].media.nodes)\r\n      setName(data.Page.studios[0].name)\r\n    }\r\n  }, [data])\r\n  const total =\r\n    data && !loading\r\n      ? Math.ceil(data.Page.studios[0].media.pageInfo.total / 25)\r\n      : 1\r\n  //   const { Studio: { name = '' } = {} } = data\r\n  const changePage = (page: number) => {\r\n    setPage(page)\r\n  }\r\n\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>{name}</h2>\r\n      <div className=\"charWrapper\">\r\n        {!loading && list\r\n          ? list.map((item) => {\r\n              const {\r\n                id,\r\n                coverImage: { large: limg },\r\n                title: { english, native: ntitle },\r\n              } = item\r\n              return (\r\n                <AnimeRecomendCard\r\n                  key={id + Math.random()}\r\n                  id={id}\r\n                  english={english}\r\n                  ntitle={ntitle}\r\n                  limg={limg}\r\n                />\r\n              )\r\n            })\r\n          : ''}\r\n      </div>\r\n      <Paginator\r\n        totalPages={total}\r\n        currentPage={page}\r\n        changePage={changePage}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const StudioDetails = withRouter(StudioDetailsWrapperr)\r\n","type ErrorType = {\r\n  error: any\r\n}\r\n\r\nexport const Error: React.FC<ErrorType> = ({ error }) => {\r\n  return (\r\n    <div>\r\n      <h2 style={{ color: 'white' }}> {error.message}</h2>\r\n    </div>\r\n  )\r\n}\r\n","import { useQuery } from '@apollo/client'\r\nimport { useEffect, useState } from 'react'\r\nimport { GET_ANIME } from '../query/queries'\r\nimport Loader from '../utils/Loader'\r\nimport { List } from './List'\r\nimport { Search } from './Search'\r\nimport { Error } from '../utils/Error'\r\nimport s from './Search.module.css'\r\n\r\nexport const SearchAnime = () => {\r\n  const [value, setValue] = useState('')\r\n  const [page, setPage] = useState(1)\r\n\r\n  const { data, loading, error } = useQuery(GET_ANIME, {\r\n    variables: {\r\n      search: value,\r\n      page,\r\n    },\r\n  })\r\n\r\n  const [list, setList] = useState([])\r\n  let totalPages =\r\n    data && !loading ? Math.ceil(data.Page.pageInfo.total / 20) : 1\r\n\r\n  useEffect(() => {\r\n    if (!loading && !error) {\r\n      setList(data.Page.media)\r\n    }\r\n  }, [data])\r\n\r\n  const inputHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault()\r\n    setValue(e.target.value)\r\n  }\r\n\r\n  const changePage = (page: number) => {\r\n    setPage(page)\r\n  }\r\n\r\n  if (error) {\r\n    return <Error error={error} />\r\n  }\r\n  if (loading) {\r\n    return <Loader />\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className={s.container}>\r\n        <h2>Search anime: </h2>\r\n        <Search inputHandler={inputHandler} />\r\n      </div>\r\n\r\n      <div className={'cards-inner'}>\r\n        <List\r\n          list={list}\r\n          loading={loading}\r\n          changePage={changePage}\r\n          totalPages={totalPages}\r\n          page={page}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import { useQuery } from '@apollo/client'\nimport { useEffect, useState } from 'react'\nimport { Route } from 'react-router-dom'\nimport './App.css'\nimport { Characters } from './components/Characters'\nimport { Header } from './components/Header'\nimport { ItemDetailsContainer } from './components/AnimeDetails/ItemDetails'\nimport { List } from './components/List'\nimport { GET_ANIME_LIST } from './query/queries'\nimport { CharacterDetailWrapper } from './components/CharacterDetail/CharacterDetails'\nimport { AllCharactersListWrapper } from './components/AnimeDetails/AllAnimeCharactersList'\nimport { AllRecomendationsWrapper } from './components/AnimeDetails/AllRecomendations'\nimport { StudioDetails } from './components/Studios/StudioDetails'\nimport { SearchAnime } from './components/SearchAnime'\n\nfunction App(props: any) {\n  const totalPages = 4185\n  const [page, setPage] = useState(1)\n  const { data, loading } = useQuery(GET_ANIME_LIST, {\n    variables: {\n      page,\n    },\n  })\n  const [list, setList] = useState([])\n\n  useEffect(() => {\n    if (!loading) {\n      setList(data.Page.media)\n    }\n  }, [data])\n\n  const changePage = (page: number) => {\n    setPage(page)\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Route\n        exact\n        path=\"/\"\n        render={() => (\n          <List\n            list={list}\n            loading={loading}\n            changePage={changePage}\n            totalPages={totalPages}\n            page={page}\n          />\n        )}\n      />\n      <Route\n        exact\n        path=\"/graphql-anime-app\"\n        render={() => (\n          <List\n            list={list}\n            loading={loading}\n            changePage={changePage}\n            totalPages={totalPages}\n            page={page}\n          />\n        )}\n      />\n      <Route exact path=\"/search-anime\" component={SearchAnime} />\n      <Route\n        exact\n        path=\"/anime/:id?\"\n        component={() => <ItemDetailsContainer {...props} />}\n      />\n      <Route exact path=\"/search-character\" component={Characters} />\n      <Route\n        exact\n        path=\"/character/:id?\"\n        component={() => <CharacterDetailWrapper {...props} />}\n      />\n      <Route\n        exact\n        path=\"/anime/characters/:id?\"\n        component={() => <AllCharactersListWrapper {...props} />}\n      />\n      <Route\n        exact\n        path=\"/anime/recomendations/:id?\"\n        component={() => <AllRecomendationsWrapper {...props} />}\n      />\n      <Route\n        exact\n        path=\"/studio/:id?\"\n        component={() => <StudioDetails {...props} />}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { ApolloClient, InMemoryCache } from '@apollo/client'\r\n\r\nexport const client = new ApolloClient({\r\n  uri: 'https://graphql.anilist.co',\r\n  cache: new InMemoryCache(),\r\n})\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\nimport { ApolloProvider } from '@apollo/client'\nimport { client } from './query'\nimport { BrowserRouter } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}